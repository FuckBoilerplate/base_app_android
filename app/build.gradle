apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'
apply plugin: 'com.google.gms.google-services'


buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "me.tatarka:gradle-retrolambda:3.2.4"
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.8"
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "org.base_app_android"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("keystore")
            storePassword "storePassword"
            keyAlias "keyAlias"
            keyPassword "keyPassword"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res/sections/common',
                            'src/main/res/sections/user_demo',
                            'src/main/res/sections/dashboard',
                            'src/main/res/sections',
                            'src/main/res'
                    ]
        }
    }

    //retrolambda
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //lint crash with retrolambda, prevent abort on error
    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

ext {
    versions = [
            retrofit: "2.0.0-beta4",
            support: "23.2.0",
            dagger: "2.0.2",
            javax_annotation: "10.0-b28",
            rx_java: "1.1.0",
            rx_android: "1.0.1",
            rx_cache: "1.2.6",
            rx_gcm: "0.2.1",
            lombok: "1.16.6",
            picasso: "2.5.2",
            materialishProgress: "1.7",
            materialDialog: "0.8.5.6@aar",
            butterKnife: "7.0.1",
            rxlifecycle: "0.5.0",
            superrecyclerview: "1.1.3",
            okAdapters: "0.0.1",
            supportTest: "0.4.1",
            espresso: "2.2.1"
    ]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //Common
    apt "com.google.dagger:dagger-compiler:${versions.dagger}"
    compile "com.google.dagger:dagger:${versions.dagger}"
    provided "org.glassfish:javax.annotation:${versions.javax_annotation}"
    compile "com.github.VictorAlbertos:RxGcm:${versions.rx_gcm}"

    //Data layer
    compile "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava:${versions.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    compile "com.github.VictorAlbertos:RxCache:${versions.rx_cache}"
    compile "org.projectlombok:lombok:${versions.lombok}"

    //Presentation layer
    compile "com.android.support:appcompat-v7:${versions.support}"
    compile "com.android.support:design:${versions.support}"
    compile "io.reactivex:rxandroid:${versions.rx_android}"
    compile "com.squareup.picasso:picasso:${versions.rx_android}"
    compile "com.squareup.picasso:picasso:${versions.picasso}"
    compile "com.malinskiy:superrecyclerview:${versions.superrecyclerview}"
    compile "com.pnikosis:materialish-progress:${versions.materialishProgress}"
    compile ("com.github.afollestad.material-dialogs:core:${versions.materialDialog}") {
        transitive = true
    }
    compile "com.jakewharton:butterknife:${versions.butterKnife}"
    compile "com.trello:rxlifecycle:${versions.rxlifecycle}"
    compile "com.trello:rxlifecycle-components:${versions.rxlifecycle}"
    compile "com.github.FuckBoilerplate:OkAdapters:${versions.okAdapters}"

    //Testing
    testCompile 'junit:junit:4.12'
    androidTestCompile "com.android.support.test:runner:${versions.supportTest}"
    androidTestCompile "com.android.support.test:rules:${versions.supportTest}"
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${versions.espresso}") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
    }
}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${versions.support}"
}

task('freshStart') << {
    String startFresh = "start_fresh/"

    String data = "app/src/main/java/app/data/"
    Helper.removeDir(data+"sections/user_demo")

    Helper.moveFileDeleting(startFresh+"RestApi", data+"foundation/net/", "RestApi.java")
    Helper.moveFileDeleting(startFresh+"RestApiMock", data+"foundation/net/", "RestApiMock.java")
    Helper.moveFileDeleting(startFresh+"RxProviders", data+"foundation/cache/", "RxProviders.java")

    String domain = "app/src/main/java/app/domain/"
    Helper.removeDir(domain+"user_demo")
    Helper.removeDir(domain+"dashboard")

    String presentation = "app/src/main/java/app/presentation/"
    Helper.removeDir(presentation+"sections/user_demo")
    Helper.removeDir(presentation+"sections/dashboard")
    Helper.moveFileDeleting(startFresh+"PresentationComponent", presentation+"foundation/dagger/", "PresentationComponent.java")
    Helper.moveFileDeleting(startFresh+"LaunchPresenter", presentation+"sections/launch/", "LaunchPresenter.java")

    Helper.moveFileDeleting(startFresh+"Wireframe", presentation+"sections", "Wireframe.java")

    Helper.removeDir("app/src/main/res/sections/user_demo")
    Helper.removeDir("app/src/main/res/sections/dashboard")
    Helper.removeDir("app/src/main/res/drawable-xxxhdpi")

    Helper.moveFileDeleting(startFresh+"AndroidManifest", "app/src/main/", "AndroidManifest.xml")
    Helper.moveFileDeleting(startFresh+"strings", "app/src/main/res/values/", "strings.xml")
    Helper.moveFileDeleting(startFresh+"styles", "app/src/main/res/values/", "styles.xml")
    Helper.moveFileDeleting(startFresh+"build", "app/", "build.gradle")

    String presentationTest = "app/src/androidTest/java/app/"
    Helper.removeDir(presentationTest+"sections/user_demo")
    Helper.removeDir(presentationTest+"sections/dashboard")
    Helper.moveFileDeleting(startFresh+"SuiteIntegration", presentationTest+"common/", "SuiteIntegration.java")

    String unitTest = "app/src/test/java/app/"
    Helper.moveFileDeleting(startFresh+"RestApiTest", unitTest+"data/foundation/", "RestApiTest.java")

    Helper.moveFileDeleting(startFresh+"README.md", ".", "README.md")
    Helper.moveFileDeleting(startFresh+"LICENSE", ".", "LICENSE")

    Helper.removeDir(".git")
    Helper.removeDir(startFresh)

    println("Remember clean and build project")
}

class Helper {
    static void removeDir(String path) {
        new File(path).deleteDir()
    }

    static void moveFileDeleting(String source, String destination, String nameNewFile) {
        File fileSrc = new File(source)
        File dir = new File(destination)
        File fileDst = new File(dir, nameNewFile)
        fileDst.delete()
        if (!fileSrc.renameTo(fileDst)) println("Failed to replace " + fileDst.getAbsolutePath())
    }
}